package com.openapi.demo1.dto;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * Additional version-dependent information used to decrypt and verify the payment.
 */

@Schema(name = "AppleHeader", description = "Additional version-dependent information used to decrypt and verify the payment.")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-07T17:34:59.232080700+07:00[Asia/Bangkok]")
public class AppleHeader {

  @JsonProperty("applicationDataHash")
  private String applicationDataHash;

  @JsonProperty("ephemeralPublicKey")
  private String ephemeralPublicKey;

  @JsonProperty("publicKeyHash")
  private String publicKeyHash;

  @JsonProperty("transactionId")
  private String transactionId;

  public AppleHeader applicationDataHash(String applicationDataHash) {
    this.applicationDataHash = applicationDataHash;
    return this;
  }

  /**
   * Encrypted app data.
   * @return applicationDataHash
  */
  @Size(max = 256) 
  @Schema(name = "applicationDataHash", example = "94ee059335e587e501cc4bf90613e0814f00a7b08bc7c648fd865a2af6a22cc2", description = "Encrypted app data.", required = false)
  public String getApplicationDataHash() {
    return applicationDataHash;
  }

  public void setApplicationDataHash(String applicationDataHash) {
    this.applicationDataHash = applicationDataHash;
  }

  public AppleHeader ephemeralPublicKey(String ephemeralPublicKey) {
    this.ephemeralPublicKey = ephemeralPublicKey;
    return this;
  }

  /**
   * Used to derive the actual public key. Ephemeral public key bytes. EC_v1 only. X.509 encoded key bytes, base64 encoded as a string.
   * @return ephemeralPublicKey
  */
  @Size(max = 256) 
  @Schema(name = "ephemeralPublicKey", example = "MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEvR+anQg6pElOsCnC3HIeNoEs2XMHQwxuy9plV1MfRRtIiHnQ6MyOS+1FQ7WZR2bVAnHFhPFaM9RYe7/bynvVvg==", description = "Used to derive the actual public key. Ephemeral public key bytes. EC_v1 only. X.509 encoded key bytes, base64 encoded as a string.", required = false)
  public String getEphemeralPublicKey() {
    return ephemeralPublicKey;
  }

  public void setEphemeralPublicKey(String ephemeralPublicKey) {
    this.ephemeralPublicKey = ephemeralPublicKey;
  }

  public AppleHeader publicKeyHash(String publicKeyHash) {
    this.publicKeyHash = publicKeyHash;
    return this;
  }

  /**
   * Hash of the X.509 encoded public key bytes of the merchant’s certificate. SHA–256 hash, base64 encoded as a string.
   * @return publicKeyHash
  */
  @Size(max = 256) 
  @Schema(name = "publicKeyHash", example = "KRsyW0NauLpN8OwKr+yeu4jl6APbgW05/TYo5eGW0bQ=", description = "Hash of the X.509 encoded public key bytes of the merchant’s certificate. SHA–256 hash, base64 encoded as a string.", required = false)
  public String getPublicKeyHash() {
    return publicKeyHash;
  }

  public void setPublicKeyHash(String publicKeyHash) {
    this.publicKeyHash = publicKeyHash;
  }

  public AppleHeader transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Transaction ID generated by the Apple device. A hexadecimal identifier as a string.
   * @return transactionId
  */
  @Size(max = 256) 
  @Schema(name = "transactionId", example = "31323334353637", description = "Transaction ID generated by the Apple device. A hexadecimal identifier as a string.", required = false)
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppleHeader appleHeader = (AppleHeader) o;
    return Objects.equals(this.applicationDataHash, appleHeader.applicationDataHash) &&
        Objects.equals(this.ephemeralPublicKey, appleHeader.ephemeralPublicKey) &&
        Objects.equals(this.publicKeyHash, appleHeader.publicKeyHash) &&
        Objects.equals(this.transactionId, appleHeader.transactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationDataHash, ephemeralPublicKey, publicKeyHash, transactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppleHeader {\n");
    sb.append("    applicationDataHash: ").append(toIndentedString(applicationDataHash)).append("\n");
    sb.append("    ephemeralPublicKey: ").append(toIndentedString(ephemeralPublicKey)).append("\n");
    sb.append("    publicKeyHash: ").append(toIndentedString(publicKeyHash)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

