/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.openapi.demo1.web;

import com.openapi.demo1.dto.EnhancedDataServiceRequest;
import com.openapi.demo1.dto.EnhancedDataServiceResponse;
import com.openapi.demo1.dto.ErrorResponse;
import com.openapi.demo1.dto.ReturnOptimizerRequest;
import com.openapi.demo1.dto.ReturnOptimizerResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-07T17:34:59.232080700+07:00[Asia/Bangkok]")
@Validated
@Tag(name = "daas", description = "the daas API")
@RequestMapping("${openapi.payments.base-path:/ch}")
public interface DaasApi {

    default DaasApiDelegate getDelegate() {
        return new DaasApiDelegate() {};
    }

    /**
     * POST /daas/v1/enhanceddata : Submit a EDS Request.
     * Use this payload prior to a transaction to perform an Enhanced Data Service request for a payment card or payment token. This will be used by the issuer to make a more informed authorization decision.
     *
     * @param contentType The content type. Valid value (application/json). (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format. (required)
     * @param apiKey API key provided to the merchant associating the requests with the appropriate app in the Developer Portal. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes). (required)
     * @param authTokenType Indicates authorization type HMAC, JWT, or AccessToken. (required)
     * @param authorization Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal. (required)
     * @param enhancedDataServiceRequest  (required)
     * @param acceptLanguage The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA. (optional, default to Accept-Language)
     * @param messageDigest Needed only from customer browser or app to the API in Hosted Payment Page requests. (optional, default to Message-Digest)
     * @return Created (status code 201)
     *         or The request cannot be validated. (status code 400)
     *         or The request was unauthorized. (status code 401)
     *         or The requested resource does not exist. (status code 404)
     *         or The request was timed out due to not receiving the request in time. (status code 408)
     *         or The media type is not supported. (status code 415)
     *         or The request was sent too early. (status code 425)
     *         or Too many request were sent. (status code 429)
     *         or An unexpected internal server error occurred. (status code 500)
     *         or The service was unavailable. (status code 503)
     *         or The request timed out while waiting for a response. (status code 504)
     */
    @Operation(
        operationId = "daasV1EnhanceddataPost",
        summary = "Submit a EDS Request.",
        tags = { "Enhanced Data Definition" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = EnhancedDataServiceResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request cannot be validated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request was unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The requested resource does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "408", description = "The request was timed out due to not receiving the request in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "415", description = "The media type is not supported.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "425", description = "The request was sent too early.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many request were sent.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected internal server error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "The service was unavailable.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "504", description = "The request timed out while waiting for a response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/daas/v1/enhanceddata",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<EnhancedDataServiceResponse> daasV1EnhanceddataPost(
        @NotNull @Parameter(name = "Content-Type", description = "The content type. Valid value (application/json).", required = true) @RequestHeader(value = "Content-Type", required = true, defaultValue = "application/json") String contentType,
        @NotNull @Parameter(name = "Client-Request-Id", description = "A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format.", required = true) @RequestHeader(value = "Client-Request-Id", required = true, defaultValue = "Client-Request-Id") String clientRequestId,
        @NotNull @Parameter(name = "Api-Key", description = "API key provided to the merchant associating the requests with the appropriate app in the Developer Portal.", required = true) @RequestHeader(value = "Api-Key", required = true, defaultValue = "Api-Key") String apiKey,
        @NotNull @Parameter(name = "Timestamp", description = "Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes).", required = true) @RequestHeader(value = "Timestamp", required = true) Long timestamp,
        @NotNull @Parameter(name = "Auth-Token-Type", description = "Indicates authorization type HMAC, JWT, or AccessToken.", required = true) @RequestHeader(value = "Auth-Token-Type", required = true, defaultValue = "Auth-Token-Type") String authTokenType,
        @NotNull @Parameter(name = "Authorization", description = "Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal.", required = true) @RequestHeader(value = "Authorization", required = true, defaultValue = "Authorization") String authorization,
        @Parameter(name = "EnhancedDataServiceRequest", description = "", required = true) @Valid @RequestBody EnhancedDataServiceRequest enhancedDataServiceRequest,
        @Parameter(name = "Accept-Language", description = "The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA.") @RequestHeader(value = "Accept-Language", required = false, defaultValue = "Accept-Language") String acceptLanguage,
        @Parameter(name = "Message-Digest", description = "Needed only from customer browser or app to the API in Hosted Payment Page requests.") @RequestHeader(value = "Message-Digest", required = false, defaultValue = "Message-Digest") String messageDigest
    ) {
        return getDelegate().daasV1EnhanceddataPost(contentType, clientRequestId, apiKey, timestamp, authTokenType, authorization, enhancedDataServiceRequest, acceptLanguage, messageDigest);
    }


    /**
     * POST /daas/v1/returnoptimizer : Submit a ROS request.
     * Use this payload prior to a transaction to perform an Return Optimizer request for a PaymentToken. This will be used by the merchant to make a more informed authorization decision.
     *
     * @param contentType The content type. Valid value (application/json). (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format. (required)
     * @param apiKey API key provided to the merchant associating the requests with the appropriate app in the Developer Portal. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes). (required)
     * @param authTokenType Indicates authorization type HMAC, JWT, or AccessToken. (required)
     * @param authorization Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal. (required)
     * @param returnOptimizerRequest  (required)
     * @param acceptLanguage The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA. (optional, default to Accept-Language)
     * @param messageDigest Needed only from customer browser or app to the API in Hosted Payment Page requests. (optional, default to Message-Digest)
     * @return Created (status code 201)
     *         or The request cannot be validated. (status code 400)
     *         or The request was unauthorized. (status code 401)
     *         or The requested resource does not exist. (status code 404)
     *         or The request was timed out due to not receiving the request in time. (status code 408)
     *         or The media type is not supported. (status code 415)
     *         or The request was sent too early. (status code 425)
     *         or Too many request were sent. (status code 429)
     *         or An unexpected internal server error occurred. (status code 500)
     *         or The service was unavailable. (status code 503)
     *         or The request timed out while waiting for a response. (status code 504)
     */
    @Operation(
        operationId = "daasV1ReturnoptimizerPost",
        summary = "Submit a ROS request.",
        tags = { "Return Optimizer Definition" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ReturnOptimizerResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request cannot be validated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request was unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The requested resource does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "408", description = "The request was timed out due to not receiving the request in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "415", description = "The media type is not supported.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "425", description = "The request was sent too early.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many request were sent.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected internal server error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "The service was unavailable.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "504", description = "The request timed out while waiting for a response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/daas/v1/returnoptimizer",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ReturnOptimizerResponse> daasV1ReturnoptimizerPost(
        @NotNull @Parameter(name = "Content-Type", description = "The content type. Valid value (application/json).", required = true) @RequestHeader(value = "Content-Type", required = true, defaultValue = "application/json") String contentType,
        @NotNull @Parameter(name = "Client-Request-Id", description = "A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format.", required = true) @RequestHeader(value = "Client-Request-Id", required = true, defaultValue = "Client-Request-Id") String clientRequestId,
        @NotNull @Parameter(name = "Api-Key", description = "API key provided to the merchant associating the requests with the appropriate app in the Developer Portal.", required = true) @RequestHeader(value = "Api-Key", required = true, defaultValue = "Api-Key") String apiKey,
        @NotNull @Parameter(name = "Timestamp", description = "Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes).", required = true) @RequestHeader(value = "Timestamp", required = true) Long timestamp,
        @NotNull @Parameter(name = "Auth-Token-Type", description = "Indicates authorization type HMAC, JWT, or AccessToken.", required = true) @RequestHeader(value = "Auth-Token-Type", required = true, defaultValue = "Auth-Token-Type") String authTokenType,
        @NotNull @Parameter(name = "Authorization", description = "Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal.", required = true) @RequestHeader(value = "Authorization", required = true, defaultValue = "Authorization") String authorization,
        @Parameter(name = "ReturnOptimizerRequest", description = "", required = true) @Valid @RequestBody ReturnOptimizerRequest returnOptimizerRequest,
        @Parameter(name = "Accept-Language", description = "The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA.") @RequestHeader(value = "Accept-Language", required = false, defaultValue = "Accept-Language") String acceptLanguage,
        @Parameter(name = "Message-Digest", description = "Needed only from customer browser or app to the API in Hosted Payment Page requests.") @RequestHeader(value = "Message-Digest", required = false, defaultValue = "Message-Digest") String messageDigest
    ) {
        return getDelegate().daasV1ReturnoptimizerPost(contentType, clientRequestId, apiKey, timestamp, authTokenType, authorization, returnOptimizerRequest, acceptLanguage, messageDigest);
    }

}
