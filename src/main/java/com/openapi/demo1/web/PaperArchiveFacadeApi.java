/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.openapi.demo1.web;

import com.openapi.demo1.dto.ConvertToMarkdownForWebsite200Response;
import com.openapi.demo1.dto.CreatePaperItemParameter;
import com.openapi.demo1.dto.PaperItemDTO;
import com.openapi.demo1.dto.PaperItemKey;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-07T17:56:40.073353400+07:00[Asia/Bangkok]")
@Validated
@Tag(name = "PaperArchiveFacade", description = "the PaperArchiveFacade API")
@RequestMapping("${openapi.referenceManagementService.base-path:}")
public interface PaperArchiveFacadeApi {

    default PaperArchiveFacadeApiDelegate getDelegate() {
        return new PaperArchiveFacadeApiDelegate() {};
    }

    /**
     * POST /PaperArchiveFacade : convertToMarkdownForWebsite
     * 
     *
     * @param paperItemKey  (optional)
     * @return convertToMarkdownForWebsite successful execution (status code 200)
     */
    @Operation(
        operationId = "convertToMarkdownForWebsite",
        summary = "convertToMarkdownForWebsite",
        tags = { "PaperArchiveFacade" },
        responses = {
            @ApiResponse(responseCode = "200", description = "convertToMarkdownForWebsite successful execution", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ConvertToMarkdownForWebsite200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/PaperArchiveFacade",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ConvertToMarkdownForWebsite200Response> convertToMarkdownForWebsite(
        @Parameter(name = "PaperItemKey", description = "") @Valid @RequestBody(required = false) PaperItemKey paperItemKey
    ) {
        return getDelegate().convertToMarkdownForWebsite(paperItemKey);
    }


    /**
     * PUT /PaperArchiveFacade : createPaperItem (write only method)
     * [State Creation Operation](https://microservice-api-patterns.org/patterns/responsibility/operationResponsibilities/StateCreationOperation.html).
     *
     * @param createPaperItemParameter  (optional)
     * @return createPaperItem successful execution (status code 200)
     */
    @Operation(
        operationId = "createPaperItem",
        summary = "createPaperItem (write only method)",
        tags = { "PaperArchiveFacade" },
        responses = {
            @ApiResponse(responseCode = "200", description = "createPaperItem successful execution", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaperItemDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/PaperArchiveFacade",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<PaperItemDTO> createPaperItem(
        @Parameter(name = "CreatePaperItemParameter", description = "") @Valid @RequestBody(required = false) CreatePaperItemParameter createPaperItemParameter
    ) {
        return getDelegate().createPaperItem(createPaperItemParameter);
    }


    /**
     * GET /PaperArchiveFacade : lookupPapersFromAuthor (read only method)
     * [Retrieval Operation](https://microservice-api-patterns.org/patterns/responsibility/operationResponsibilities/RetrievalOperation.html).
     *
     * @param author &lt;a href&#x3D;\&quot;https://microservice-api-patterns.org/patterns/structure/elementStereotypes/DataElement\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Data Element&lt;/a&gt; (required)
     * @return lookupPapersFromAuthor successful execution (status code 200)
     */
    @Operation(
        operationId = "lookupPapersFromAuthor",
        summary = "lookupPapersFromAuthor (read only method)",
        tags = { "PaperArchiveFacade" },
        responses = {
            @ApiResponse(responseCode = "200", description = "lookupPapersFromAuthor successful execution", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PaperItemDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/PaperArchiveFacade",
        produces = { "application/json" }
    )
    default ResponseEntity<List<PaperItemDTO>> lookupPapersFromAuthor(
        @NotNull @Parameter(name = "author", description = "<a href=\"https://microservice-api-patterns.org/patterns/structure/elementStereotypes/DataElement\" target=\"_blank\">Data Element</a>", required = true) @Valid @RequestParam(value = "author", required = true) String author
    ) {
        return getDelegate().lookupPapersFromAuthor(author);
    }

}
