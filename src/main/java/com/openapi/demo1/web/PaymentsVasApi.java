/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.openapi.demo1.web;

import com.openapi.demo1.dto.AccountInformationRequest;
import com.openapi.demo1.dto.AccountInformationResponse;
import com.openapi.demo1.dto.AccountVerificationRequest;
import com.openapi.demo1.dto.AccountVerificationResponse;
import com.openapi.demo1.dto.CardCaptureRequest;
import com.openapi.demo1.dto.ErrorResponse;
import com.openapi.demo1.dto.SecurityCredentialsRequest;
import com.openapi.demo1.dto.SecurityCredentialsResponse;
import com.openapi.demo1.dto.TokenizationRequest;
import com.openapi.demo1.dto.TokenizationResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-07T17:34:59.232080700+07:00[Asia/Bangkok]")
@Validated
@Tag(name = "payments-vas", description = "the payments-vas API")
@RequestMapping("${openapi.payments.base-path:/ch}")
public interface PaymentsVasApi {

    default PaymentsVasApiDelegate getDelegate() {
        return new PaymentsVasApiDelegate() {};
    }

    /**
     * POST /payments-vas/v1/accounts/information-lookup : Lookup a payment card or payment token.
     * Use this to look up card related information such as issuer country, card function and card brand associated with a card or token.
     *
     * @param contentType The content type. Valid value (application/json). (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format. (required)
     * @param apiKey API key provided to the merchant associating the requests with the appropriate app in the Developer Portal. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes). (required)
     * @param authTokenType Indicates authorization type HMAC, JWT, or AccessToken. (required)
     * @param authorization Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal. (required)
     * @param accountInformationRequest  (required)
     * @param acceptLanguage The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA. (optional, default to Accept-Language)
     * @param messageDigest Needed only from customer browser or app to the API in Hosted Payment Page requests. (optional, default to Message-Digest)
     * @return Created (status code 201)
     *         or The request cannot be validated. (status code 400)
     *         or The request was unauthorized. (status code 401)
     *         or The requested resource does not exist. (status code 404)
     *         or The request was timed out due to not receiving the request in time. (status code 408)
     *         or The media type is not supported. (status code 415)
     *         or The request was sent too early. (status code 425)
     *         or Too many request were sent. (status code 429)
     *         or An unexpected internal server error occurred. (status code 500)
     *         or The service was unavailable. (status code 503)
     *         or The request timed out while waiting for a response. (status code 504)
     */
    @Operation(
        operationId = "paymentsVasV1AccountsInformationLookupPost",
        summary = "Lookup a payment card or payment token.",
        tags = { "Account Information Endpoint Definition" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountInformationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request cannot be validated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request was unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The requested resource does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "408", description = "The request was timed out due to not receiving the request in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "415", description = "The media type is not supported.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "425", description = "The request was sent too early.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many request were sent.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected internal server error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "The service was unavailable.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "504", description = "The request timed out while waiting for a response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments-vas/v1/accounts/information-lookup",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountInformationResponse> paymentsVasV1AccountsInformationLookupPost(
        @NotNull @Parameter(name = "Content-Type", description = "The content type. Valid value (application/json).", required = true) @RequestHeader(value = "Content-Type", required = true, defaultValue = "application/json") String contentType,
        @NotNull @Parameter(name = "Client-Request-Id", description = "A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format.", required = true) @RequestHeader(value = "Client-Request-Id", required = true, defaultValue = "Client-Request-Id") String clientRequestId,
        @NotNull @Parameter(name = "Api-Key", description = "API key provided to the merchant associating the requests with the appropriate app in the Developer Portal.", required = true) @RequestHeader(value = "Api-Key", required = true, defaultValue = "Api-Key") String apiKey,
        @NotNull @Parameter(name = "Timestamp", description = "Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes).", required = true) @RequestHeader(value = "Timestamp", required = true) Long timestamp,
        @NotNull @Parameter(name = "Auth-Token-Type", description = "Indicates authorization type HMAC, JWT, or AccessToken.", required = true) @RequestHeader(value = "Auth-Token-Type", required = true, defaultValue = "Auth-Token-Type") String authTokenType,
        @NotNull @Parameter(name = "Authorization", description = "Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal.", required = true) @RequestHeader(value = "Authorization", required = true, defaultValue = "Authorization") String authorization,
        @Parameter(name = "AccountInformationRequest", description = "", required = true) @Valid @RequestBody AccountInformationRequest accountInformationRequest,
        @Parameter(name = "Accept-Language", description = "The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA.") @RequestHeader(value = "Accept-Language", required = false, defaultValue = "Accept-Language") String acceptLanguage,
        @Parameter(name = "Message-Digest", description = "Needed only from customer browser or app to the API in Hosted Payment Page requests.") @RequestHeader(value = "Message-Digest", required = false, defaultValue = "Message-Digest") String messageDigest
    ) {
        return getDelegate().paymentsVasV1AccountsInformationLookupPost(contentType, clientRequestId, apiKey, timestamp, authTokenType, authorization, accountInformationRequest, acceptLanguage, messageDigest);
    }


    /**
     * POST /payments-vas/v1/accounts/verification : Verify a payment card or payment token.
     * Use this payload to perform an account verification for a payment card or payment token. This will check the validity and respond if an account is valid or not.
     *
     * @param contentType The content type. Valid value (application/json). (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format. (required)
     * @param apiKey API key provided to the merchant associating the requests with the appropriate app in the Developer Portal. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes). (required)
     * @param authTokenType Indicates authorization type HMAC, JWT, or AccessToken. (required)
     * @param authorization Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal. (required)
     * @param accountVerificationRequest  (required)
     * @param acceptLanguage The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA. (optional, default to Accept-Language)
     * @param messageDigest Needed only from customer browser or app to the API in Hosted Payment Page requests. (optional, default to Message-Digest)
     * @return Created (status code 201)
     *         or The request cannot be validated. (status code 400)
     *         or The request was unauthorized. (status code 401)
     *         or The requested resource does not exist. (status code 404)
     *         or The request was timed out due to not receiving the request in time. (status code 408)
     *         or The media type is not supported. (status code 415)
     *         or The request was sent too early. (status code 425)
     *         or Too many request were sent. (status code 429)
     *         or An unexpected internal server error occurred. (status code 500)
     *         or The service was unavailable. (status code 503)
     *         or The request timed out while waiting for a response. (status code 504)
     */
    @Operation(
        operationId = "paymentsVasV1AccountsVerificationPost",
        summary = "Verify a payment card or payment token.",
        tags = { "Account  Verification Endpoint Definition" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AccountVerificationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request cannot be validated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request was unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The requested resource does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "408", description = "The request was timed out due to not receiving the request in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "415", description = "The media type is not supported.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "425", description = "The request was sent too early.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many request were sent.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected internal server error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "The service was unavailable.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "504", description = "The request timed out while waiting for a response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments-vas/v1/accounts/verification",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<AccountVerificationResponse> paymentsVasV1AccountsVerificationPost(
        @NotNull @Parameter(name = "Content-Type", description = "The content type. Valid value (application/json).", required = true) @RequestHeader(value = "Content-Type", required = true, defaultValue = "application/json") String contentType,
        @NotNull @Parameter(name = "Client-Request-Id", description = "A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format.", required = true) @RequestHeader(value = "Client-Request-Id", required = true, defaultValue = "Client-Request-Id") String clientRequestId,
        @NotNull @Parameter(name = "Api-Key", description = "API key provided to the merchant associating the requests with the appropriate app in the Developer Portal.", required = true) @RequestHeader(value = "Api-Key", required = true, defaultValue = "Api-Key") String apiKey,
        @NotNull @Parameter(name = "Timestamp", description = "Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes).", required = true) @RequestHeader(value = "Timestamp", required = true) Long timestamp,
        @NotNull @Parameter(name = "Auth-Token-Type", description = "Indicates authorization type HMAC, JWT, or AccessToken.", required = true) @RequestHeader(value = "Auth-Token-Type", required = true, defaultValue = "Auth-Token-Type") String authTokenType,
        @NotNull @Parameter(name = "Authorization", description = "Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal.", required = true) @RequestHeader(value = "Authorization", required = true, defaultValue = "Authorization") String authorization,
        @Parameter(name = "AccountVerificationRequest", description = "", required = true) @Valid @RequestBody AccountVerificationRequest accountVerificationRequest,
        @Parameter(name = "Accept-Language", description = "The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA.") @RequestHeader(value = "Accept-Language", required = false, defaultValue = "Accept-Language") String acceptLanguage,
        @Parameter(name = "Message-Digest", description = "Needed only from customer browser or app to the API in Hosted Payment Page requests.") @RequestHeader(value = "Message-Digest", required = false, defaultValue = "Message-Digest") String messageDigest
    ) {
        return getDelegate().paymentsVasV1AccountsVerificationPost(contentType, clientRequestId, apiKey, timestamp, authTokenType, authorization, accountVerificationRequest, acceptLanguage, messageDigest);
    }


    /**
     * POST /payments-vas/v1/card-capture : Submit a &lt;a href&#x3D;\&quot;../docs?path&#x3D;docs/Online-Mobile-Digital/Secure-Data-Capture/API/API-Only.md\&quot;&gt;merchant managed&lt;/a&gt; card capture for use with Secure Card Capture
     *
     * @param contentType The content type. Valid value (application/json). (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format. (required)
     * @param apiKey API key provided to the merchant associating the requests with the appropriate app in the Developer Portal. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes). (required)
     * @param authTokenType Indicates authorization type HMAC, JWT, or AccessToken. (required)
     * @param authorization Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal. (required)
     * @param cardCaptureRequest  (required)
     * @param acceptLanguage The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA. (optional, default to Accept-Language)
     * @param messageDigest Needed only from customer browser or app to the API in Hosted Payment Page requests. (optional, default to Message-Digest)
     * @return Success. (status code 204)
     *         or The request cannot be validated. (status code 400)
     *         or The request was unauthorized. (status code 401)
     *         or The requested resource does not exist. (status code 404)
     *         or The request was timed out due to not receiving the request in time. (status code 408)
     *         or The media type is not supported. (status code 415)
     *         or The request was sent too early. (status code 425)
     *         or Too many request were sent. (status code 429)
     *         or An unexpected internal server error occurred. (status code 500)
     *         or The service was unavailable. (status code 503)
     *         or The request timed out while waiting for a response. (status code 504)
     */
    @Operation(
        operationId = "paymentsVasV1CardCapturePost",
        summary = "Submit a <a href=\"../docs?path=docs/Online-Mobile-Digital/Secure-Data-Capture/API/API-Only.md\">merchant managed</a> card capture for use with Secure Card Capture",
        responses = {
            @ApiResponse(responseCode = "204", description = "Success."),
            @ApiResponse(responseCode = "400", description = "The request cannot be validated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request was unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The requested resource does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "408", description = "The request was timed out due to not receiving the request in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "415", description = "The media type is not supported.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "425", description = "The request was sent too early.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many request were sent.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected internal server error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "The service was unavailable.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "504", description = "The request timed out while waiting for a response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments-vas/v1/card-capture",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> paymentsVasV1CardCapturePost(
        @NotNull @Parameter(name = "Content-Type", description = "The content type. Valid value (application/json).", required = true) @RequestHeader(value = "Content-Type", required = true, defaultValue = "application/json") String contentType,
        @NotNull @Parameter(name = "Client-Request-Id", description = "A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format.", required = true) @RequestHeader(value = "Client-Request-Id", required = true, defaultValue = "Client-Request-Id") String clientRequestId,
        @NotNull @Parameter(name = "Api-Key", description = "API key provided to the merchant associating the requests with the appropriate app in the Developer Portal.", required = true) @RequestHeader(value = "Api-Key", required = true, defaultValue = "Api-Key") String apiKey,
        @NotNull @Parameter(name = "Timestamp", description = "Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes).", required = true) @RequestHeader(value = "Timestamp", required = true) Long timestamp,
        @NotNull @Parameter(name = "Auth-Token-Type", description = "Indicates authorization type HMAC, JWT, or AccessToken.", required = true) @RequestHeader(value = "Auth-Token-Type", required = true, defaultValue = "Auth-Token-Type") String authTokenType,
        @NotNull @Parameter(name = "Authorization", description = "Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal.", required = true) @RequestHeader(value = "Authorization", required = true, defaultValue = "Authorization") String authorization,
        @Parameter(name = "CardCaptureRequest", description = "", required = true) @Valid @RequestBody CardCaptureRequest cardCaptureRequest,
        @Parameter(name = "Accept-Language", description = "The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA.") @RequestHeader(value = "Accept-Language", required = false, defaultValue = "Accept-Language") String acceptLanguage,
        @Parameter(name = "Message-Digest", description = "Needed only from customer browser or app to the API in Hosted Payment Page requests.") @RequestHeader(value = "Message-Digest", required = false, defaultValue = "Message-Digest") String messageDigest
    ) {
        return getDelegate().paymentsVasV1CardCapturePost(contentType, clientRequestId, apiKey, timestamp, authTokenType, authorization, cardCaptureRequest, acceptLanguage, messageDigest);
    }


    /**
     * POST /payments-vas/v1/security/credentials : Request security credentials (access token).
     * This is the credential generation call for authorizing subsequent financial transactions. A valid &lt;code&gt;accessToken&lt;/code&gt; is required for web client requests.
     *
     * @param contentType The content type. Valid value (application/json). (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format. (required)
     * @param apiKey API key provided to the merchant associating the requests with the appropriate app in the Developer Portal. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes). (required)
     * @param authTokenType Indicates authorization type HMAC, JWT, or AccessToken. (required)
     * @param authorization Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal. (required)
     * @param securityCredentialsRequest  (required)
     * @param acceptLanguage The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA. (optional, default to Accept-Language)
     * @param messageDigest Needed only from customer browser or app to the API in Hosted Payment Page requests. (optional, default to Message-Digest)
     * @return Created (status code 201)
     *         or The request cannot be validated. (status code 400)
     *         or The request was unauthorized. (status code 401)
     *         or The requested resource does not exist. (status code 404)
     *         or The request was timed out due to not receiving the request in time. (status code 408)
     *         or The media type is not supported. (status code 415)
     *         or The request was sent too early. (status code 425)
     *         or Too many request were sent. (status code 429)
     *         or An unexpected internal server error occurred. (status code 500)
     *         or The service was unavailable. (status code 503)
     *         or The request timed out while waiting for a response. (status code 504)
     */
    @Operation(
        operationId = "paymentsVasV1SecurityCredentialsPost",
        summary = "Request security credentials (access token).",
        tags = { "Payment Security Endpoint" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SecurityCredentialsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request cannot be validated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request was unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The requested resource does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "408", description = "The request was timed out due to not receiving the request in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "415", description = "The media type is not supported.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "425", description = "The request was sent too early.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many request were sent.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected internal server error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "The service was unavailable.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "504", description = "The request timed out while waiting for a response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments-vas/v1/security/credentials",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<SecurityCredentialsResponse> paymentsVasV1SecurityCredentialsPost(
        @NotNull @Parameter(name = "Content-Type", description = "The content type. Valid value (application/json).", required = true) @RequestHeader(value = "Content-Type", required = true, defaultValue = "application/json") String contentType,
        @NotNull @Parameter(name = "Client-Request-Id", description = "A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format.", required = true) @RequestHeader(value = "Client-Request-Id", required = true, defaultValue = "Client-Request-Id") String clientRequestId,
        @NotNull @Parameter(name = "Api-Key", description = "API key provided to the merchant associating the requests with the appropriate app in the Developer Portal.", required = true) @RequestHeader(value = "Api-Key", required = true, defaultValue = "Api-Key") String apiKey,
        @NotNull @Parameter(name = "Timestamp", description = "Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes).", required = true) @RequestHeader(value = "Timestamp", required = true) Long timestamp,
        @NotNull @Parameter(name = "Auth-Token-Type", description = "Indicates authorization type HMAC, JWT, or AccessToken.", required = true) @RequestHeader(value = "Auth-Token-Type", required = true, defaultValue = "Auth-Token-Type") String authTokenType,
        @NotNull @Parameter(name = "Authorization", description = "Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal.", required = true) @RequestHeader(value = "Authorization", required = true, defaultValue = "Authorization") String authorization,
        @Parameter(name = "SecurityCredentialsRequest", description = "", required = true) @Valid @RequestBody SecurityCredentialsRequest securityCredentialsRequest,
        @Parameter(name = "Accept-Language", description = "The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA.") @RequestHeader(value = "Accept-Language", required = false, defaultValue = "Accept-Language") String acceptLanguage,
        @Parameter(name = "Message-Digest", description = "Needed only from customer browser or app to the API in Hosted Payment Page requests.") @RequestHeader(value = "Message-Digest", required = false, defaultValue = "Message-Digest") String messageDigest
    ) {
        return getDelegate().paymentsVasV1SecurityCredentialsPost(contentType, clientRequestId, apiKey, timestamp, authTokenType, authorization, securityCredentialsRequest, acceptLanguage, messageDigest);
    }


    /**
     * POST /payments-vas/v1/tokens : Create a payment token.
     * Use this payload to create a payment token from a payment source.
     *
     * @param contentType The content type. Valid value (application/json). (required)
     * @param clientRequestId A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format. (required)
     * @param apiKey API key provided to the merchant associating the requests with the appropriate app in the Developer Portal. (required)
     * @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes). (required)
     * @param authTokenType Indicates authorization type HMAC, JWT, or AccessToken. (required)
     * @param authorization Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal. (required)
     * @param tokenizationRequest  (required)
     * @param acceptLanguage The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA. (optional, default to Accept-Language)
     * @param messageDigest Needed only from customer browser or app to the API in Hosted Payment Page requests. (optional, default to Message-Digest)
     * @return Success. (status code 200)
     *         or The request cannot be validated. (status code 400)
     *         or The request was unauthorized. (status code 401)
     *         or The requested resource does not exist. (status code 404)
     *         or The request was timed out due to not receiving the request in time. (status code 408)
     *         or The media type is not supported. (status code 415)
     *         or The request was sent too early. (status code 425)
     *         or Too many request were sent. (status code 429)
     *         or An unexpected internal server error occurred. (status code 500)
     *         or The service was unavailable. (status code 503)
     *         or The request timed out while waiting for a response. (status code 504)
     */
    @Operation(
        operationId = "paymentsVasV1TokensPost",
        summary = "Create a payment token.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TokenizationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "The request cannot be validated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "The request was unauthorized.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "The requested resource does not exist.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "408", description = "The request was timed out due to not receiving the request in time.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "415", description = "The media type is not supported.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "425", description = "The request was sent too early.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "429", description = "Too many request were sent.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "An unexpected internal server error occurred.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "The service was unavailable.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "504", description = "The request timed out while waiting for a response.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/payments-vas/v1/tokens",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<TokenizationResponse> paymentsVasV1TokensPost(
        @NotNull @Parameter(name = "Content-Type", description = "The content type. Valid value (application/json).", required = true) @RequestHeader(value = "Content-Type", required = true, defaultValue = "application/json") String contentType,
        @NotNull @Parameter(name = "Client-Request-Id", description = "A client-generated ID for request tracking and signature creation, unique per request. This is also used for idempotency control. Recommended 128-bit UUID format.", required = true) @RequestHeader(value = "Client-Request-Id", required = true, defaultValue = "Client-Request-Id") String clientRequestId,
        @NotNull @Parameter(name = "Api-Key", description = "API key provided to the merchant associating the requests with the appropriate app in the Developer Portal.", required = true) @RequestHeader(value = "Api-Key", required = true, defaultValue = "Api-Key") String apiKey,
        @NotNull @Parameter(name = "Timestamp", description = "Epoch timestamp in milliseconds in the request from a client system. Used for authorization header generation and time limit (5 minutes).", required = true) @RequestHeader(value = "Timestamp", required = true) Long timestamp,
        @NotNull @Parameter(name = "Auth-Token-Type", description = "Indicates authorization type HMAC, JWT, or AccessToken.", required = true) @RequestHeader(value = "Auth-Token-Type", required = true, defaultValue = "Auth-Token-Type") String authTokenType,
        @NotNull @Parameter(name = "Authorization", description = "Authorization header used to ensure the request has not been tampered with during transmission. Valid encryption; HMAC, JWT, or AccessToken. For more information, refer to the supporting documentation on the Developer Portal.", required = true) @RequestHeader(value = "Authorization", required = true, defaultValue = "Authorization") String authorization,
        @Parameter(name = "TokenizationRequest", description = "", required = true) @Valid @RequestBody TokenizationRequest tokenizationRequest,
        @Parameter(name = "Accept-Language", description = "The Accept Language header contains information about the language preference of a user. This HTTP header is useful to multilingual sites for deciding the best language to serve to the client. For example en-US or fr-CA.") @RequestHeader(value = "Accept-Language", required = false, defaultValue = "Accept-Language") String acceptLanguage,
        @Parameter(name = "Message-Digest", description = "Needed only from customer browser or app to the API in Hosted Payment Page requests.") @RequestHeader(value = "Message-Digest", required = false, defaultValue = "Message-Digest") String messageDigest
    ) {
        return getDelegate().paymentsVasV1TokensPost(contentType, clientRequestId, apiKey, timestamp, authTokenType, authorization, tokenizationRequest, acceptLanguage, messageDigest);
    }

}
